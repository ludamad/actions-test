name: CI
on:
  push:
    branches:
      - master
      - provernet
      - "*/ci-push*"
  merge_group:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - labeled
    branches-ignore: [devnet]
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ci-${{ (contains(github.ref_name, 'gh-readonly-queue') || github.ref_name == 'master') && github.run_id || github.ref_name }}
  cancel-in-progress: true

env:
  DOCKERHUB_PASSWORD: "${{ secrets.DOCKERHUB_PASSWORD }}"
  RUN_ID: ${{ github.run_id }}
  RUN_ATTEMPT: ${{ github.run_attempt }}
  GITHUB_TOKEN: ${{ github.token }}
  GH_SELF_HOSTED_RUNNER_TOKEN: ${{ secrets.GH_SELF_HOSTED_RUNNER_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUILD_INSTANCE_SSH_KEY: ${{ secrets.BUILD_INSTANCE_SSH_KEY }}
  GIT_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}
  WAIT_FOR_RUNNERS: false

jobs:
  configure:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: read
    outputs:
      username: example-user
      avm-transpiler: false
      build-images: false
      barretenberg: false
      barretenberg-cpp: false
      noir: false
      noir-projects: false
      yarn-project: false
      txe: false
      l1-contracts: false
      non-docs: false
      non-misc-ci: false
      non-barretenberg-cpp: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Filter Paths
        id: filter
        run: echo "All filters set to 'false' since this is a stub..."

  build-images:
    needs: [configure]
    runs-on: ubuntu-latest
    steps:
      - name: Echo Build Images
        if: needs.configure.outputs.build-images == 'true'
        run: echo "Would build images here..."

  build:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    outputs:
      e2e_list: '[]'
      bench_list: '[]'
    steps:
      - name: Echo Build Steps
        run: echo "Would run build steps here, produce e2e_list and bench_list..."

  bench-test-gate:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref_name, 'gh-readonly-queue') || github.ref_name == 'master' || contains(github.event.pull_request.labels.*.name, 'bench-all') }}
    steps:
      - run: echo "Full bench tests enabled."

  e2e-test-gate:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref_name, 'gh-readonly-queue') || github.ref_name == 'master' || contains(github.event.pull_request.labels.*.name, 'e2e-all') }}
    steps:
      - run: echo "Full E2E tests enabled."

  network-test-gate:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref_name, 'gh-readonly-queue') || github.ref_name == 'master' || contains(github.event.pull_request.labels.*.name, 'e2e-all') }}
    steps:
      - run: echo "Full network tests enabled."

  e2e:
    needs: [configure, build, e2e-test-gate]
    if: needs.configure.outputs.non-docs == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [fake]
    steps:
      - name: Echo E2E
        run: echo "Would run E2E tests here..."

  bench-e2e:
    needs: [configure, build, bench-test-gate]
    if: needs.configure.outputs.non-docs == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [fake]
    steps:
      - name: Echo Bench E2E
        run: echo "Would run benchmark E2E tests here..."

  acir-bench:
    runs-on: ubuntu-latest
    needs: [configure, bench-test-gate]
    steps:
      - name: Echo ACIR Bench
        run: echo "Would run ACIR benchmark tests here..."

  bench-summary:
    needs: [configure, acir-bench, bench-e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Echo Bench Summary
        run: echo "Would build and upload bench summary..."

  bb-gcc:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg-cpp == 'true'
    steps:
      - run: echo "Would test GCC build of barretenberg..."

  bb-native-tests:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg-cpp == 'true'
    steps:
      - run: echo "Would run native prover tests..."

  bb-js-test:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true'
    steps:
      - run: echo "Would run barretenberg JS tests..."

  noir-build-acir-tests:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would build ACIR tests..."

  bb-acir-tests-bb:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Native ACIR Tests (Misc)..."

  bb-acir-tests-bb-ultra-plonk:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Native ACIR Tests (Ultraplonk)..."

  bb-acir-tests-bb-ultra-honk:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Native ACIR Tests (Ultrahonk)..."

  bb-acir-tests-bb-client-ivc:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Native ACIR Tests (ClientIVC)..."

  bb-acir-tests-sol:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Solidity ACIR Tests..."

  bb-acir-tests-sol-honk:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB Solidity ACIR Tests (Honk)..."

  bb-acir-tests-bb-js:
    needs: [configure, build, noir-build-acir-tests]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run BB JS ACIR Tests..."

  noir-format:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.noir == 'true' || needs.configure.outputs.noir-projects == 'true'
    steps:
      - run: echo "Would format Noir code..."

  noir-test:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would run Noir tests..."

  noir-examples:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would test Noir examples..."

  noir-packages-test:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would test Noir JS packages..."

  noir-projects:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.noir == 'true' || needs.configure.outputs.noir-projects == 'true' || needs.configure.outputs.txe == 'true'
    steps:
      - run: echo "Would test Noir projects..."

  avm-format:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.avm-transpiler == 'true' || needs.configure.outputs.noir == 'true'
    steps:
      - run: echo "Would format AVM transpiler..."

  yarn-project-formatting:
    needs: [configure, build]
    if: needs.configure.outputs.yarn-project == 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would run Yarn project formatting checks..."

  yarn-project-test:
    needs: [configure, build]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would run Yarn project tests..."

  prover-client-test:
    needs: [configure, build]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would run prover client tests..."

  network-test:
    needs: [configure, network-test-gate]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        test: [test-4epochs.sh]
    steps:
      - run: 'echo "Would run network test: ${{ matrix.test }}..."'

  kind-smoke-test:
    needs: [configure, build]
    if: needs.configure.outputs.yarn-project == 'true' || github.ref_name == 'master'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would run KIND smoke tests..."

  kind-network-test:
    needs: [configure, build]
    if: contains(github.event.pull_request.labels.*.name, 'network-all') || (needs.configure.outputs.yarn-project == 'true' && github.ref_name == 'master')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - test: transfer.test.ts
            values: 16-validators
            runner_type: echo
            timeout: 60
          - test: reorg.test.ts
            values: 16-validators
            runner_type: echo
            timeout: 90
          - test: 4epochs.test.ts
            values: 16-validators
            runner_type: echo
            timeout: 60
          - test: gating-passive.test.ts
            values: 16-validators
            runner_type: echo
            timeout: 60
    steps:
      - run: echo "Would run KIND network tests for ${{ matrix.config.test }} with values=${{ matrix.config.values }}..."

  l1-contracts-test:
    needs: [configure, build-images]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.l1-contracts == 'true'
    steps:
      - run: echo "Would run L1 contracts tests..."

  docs-preview:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.non-barretenberg-cpp == 'true'
    steps:
      - run: echo "Would deploy docs preview..."

  bb-bench:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.barretenberg-cpp == 'true'
    steps:
      - run: echo "Would run BB Bench..."

  boxes:
    needs: [configure, e2e-test-gate]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would build boxes..."

  boxes-test:
    needs: [configure, e2e-test-gate]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        box: [vanilla, react]
        browser: [chromium, webkit]
    steps:
      - run: echo "Would test boxes with box=${{ matrix.box }} and browser=${{ matrix.browser }}..."

  rough-rhino-installer:
    needs: [configure, e2e-test-gate]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Would test Rough Rhino installer..."

  protocol-circuits-gates-report:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.non-docs == 'true' && needs.configure.outputs.non-misc-ci == 'true'
    steps:
      - run: echo "Would generate protocol circuits gates report..."

  public-functions-size-report:
    needs: [configure, build]
    runs-on: ubuntu-latest
    if: needs.configure.outputs.non-docs == 'true' && needs.configure.outputs.non-misc-ci == 'true'
    steps:
      - run: echo "Would generate public functions size report..."

  merge-check:
    runs-on: ubuntu-latest
    needs:
      - configure
      - build
      - e2e
      - bb-gcc
      - bb-native-tests
      - bb-js-test
      - noir-build-acir-tests
      - bb-acir-tests-bb
      - bb-acir-tests-bb-ultra-plonk
      - bb-acir-tests-bb-ultra-honk
      - bb-acir-tests-bb-client-ivc
      - bb-acir-tests-sol
      - bb-acir-tests-sol-honk
      - bb-acir-tests-bb-js
      - noir-format
      - noir-test
      - noir-examples
      - noir-packages-test
      - noir-projects
      - avm-format
      - yarn-project-formatting
      - yarn-project-test
      - prover-client-test
      - network-test
      - kind-smoke-test
      - kind-network-test
      - l1-contracts-test
      - docs-preview
      - boxes
      - boxes-test
    if: always()
    outputs:
      failure: ${{ steps.set_failed_jobs.outputs.failure }}
      failed_jobs: ${{ steps.set_failed_jobs.outputs.failed_jobs }}
    steps:
      - name: Check for Failures
        id: set_failed_jobs
        run: |
          echo "failure=false" >> $GITHUB_OUTPUT
          echo "failed_jobs=" >> $GITHUB_OUTPUT

      - name: Report overall success (non-draft)
        if: github.event.pull_request.draft == false
        run: |
          echo "All jobs succeeded, merge allowed."

      - name: Block merge (draft)
        if: github.event.pull_request.draft
        run: echo "Can't merge drafts." && exit 1

  rerun-check:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs:
      - merge-check
    if: github.event.pull_request.draft == false && !cancelled() && !contains(github.ref_name, 'gh-readonly-queue')
    steps:
      - name: Check for Rerun
        run: echo "Would trigger a rerun if needed..."

  notify:
    runs-on: ubuntu-latest
    needs:
      - merge-check
    if: github.event.pull_request.draft == false && github.ref == 'refs/heads/master' && failure() && github.run_attempt >= 2
    steps:
      - name: Notify
        run: echo "Would send notification about failure..."
